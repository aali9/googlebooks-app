{"ast":null,"code":"import _objectSpread from\"C:/Users/nasir/book-search-engine/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React from\"react\";import{BrowserRouter as Router,Routes,Route}from\"react-router-dom\";import SearchBooks from\"./pages/SearchBooks\";import SavedBooks from\"./pages/SavedBooks\";import Navbar from\"./components/Navbar\";import{ApolloClient,InMemoryCache,ApolloProvider,createHttpLink}from\"@apollo/client\";import{setContext}from\"@apollo/client/link/context\";// Construct our main GraphQL API endpoint\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:\"/graphql\"});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// get the authentication token from local storage if it exists\nvar token=localStorage.getItem(\"id_token\");// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread(_objectSpread({},headers),{},{authorization:token?\"Bearer \".concat(token):\"\"})};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(SearchBooks,{})}),/*#__PURE__*/_jsx(Route,{path:\"/saved\",element:/*#__PURE__*/_jsx(SavedBooks,{})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(\"h1\",{className:\"display-2\",children:\"Wrong page!\"})})]})]})})});}export default App;","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","SearchBooks","SavedBooks","Navbar","ApolloClient","InMemoryCache","ApolloProvider","createHttpLink","setContext","httpLink","uri","authLink","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App"],"sources":["C:/Users/nasir/book-search-engine/client/src/App.js"],"sourcesContent":["import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"6HAAA,MAAOA,MAAP,KAAkB,OAAlB,CACA,OAASC,aAAa,GAAIC,OAA1B,CAAkCC,MAAlC,CAA0CC,KAA1C,KAAuD,kBAAvD,CACA,MAAOC,YAAP,KAAwB,qBAAxB,CACA,MAAOC,WAAP,KAAuB,oBAAvB,CACA,MAAOC,OAAP,KAAmB,qBAAnB,CACA,OACEC,YADF,CAEEC,aAFF,CAGEC,cAHF,CAIEC,cAJF,KAKO,gBALP,CAMA,OAASC,UAAT,KAA2B,6BAA3B,CAEA;6IACA,GAAMC,SAAQ,CAAGF,cAAc,CAAC,CAC9BG,GAAG,CAAE,UADyB,CAAD,CAA/B,CAIA;AACA,GAAMC,SAAQ,CAAGH,UAAU,CAAC,SAACI,CAAD,MAAoB,IAAdC,QAAc,MAAdA,OAAc,CAC9C;AACA,GAAMC,MAAK,CAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAd,CACA;AACA,MAAO,CACLH,OAAO,gCACFA,OADE,MAELI,aAAa,CAAEH,KAAK,kBAAaA,KAAb,EAAuB,EAFtC,EADF,CAAP,CAMD,CAV0B,CAA3B,CAYA,GAAMI,OAAM,CAAG,GAAId,aAAJ,CAAiB,CAC9B;AACAe,IAAI,CAAER,QAAQ,CAACS,MAAT,CAAgBX,QAAhB,CAFwB,CAG9BY,KAAK,CAAE,GAAIhB,cAAJ,EAHuB,CAAjB,CAAf,CAMA,QAASiB,IAAT,EAAe,CACb,mBACE,KAAC,cAAD,EAAgB,MAAM,CAAEJ,MAAxB,uBACE,KAAC,MAAD,wBACE,wCACE,KAAC,MAAD,IADF,cAEE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,OAAO,cAAE,KAAC,WAAD,IAAzB,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,OAAO,cAAE,KAAC,UAAD,IAA9B,EAFF,cAGE,KAAC,KAAD,EACE,IAAI,CAAC,GADP,CAEE,OAAO,cAAE,WAAI,SAAS,CAAC,WAAd,yBAFX,EAHF,GAFF,GADF,EADF,EADF,CAiBD,CAED,cAAeI,IAAf"},"metadata":{},"sourceType":"module"}